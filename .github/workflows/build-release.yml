name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger for testing

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  build:
    name: Build Windows Executable
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version info
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=6.0
      shell: cmd
    
    - name: Download Vosk models (if needed)
      run: |
        if (Test-Path "download_vosk_models.py") {
          python download_vosk_models.py
        }
      shell: pwsh
      continue-on-error: true  # Don't fail if script doesn't exist
    
    - name: Build with PyInstaller
      run: |
        echo "Building with OneDir mode using spec file..."
        pyinstaller game_wiki_tooltip.spec --clean --noconfirm --distpath GameWikiAssistant_Portable_onedir
      shell: cmd
    
    - name: Create portable package structure
      run: |
        echo "Adding portable package files..."
        python build_exe.py --mode onedir --skip-deps
      shell: cmd
      continue-on-error: true  # Continue even if build_exe.py has minor issues
    
    - name: Verify build output
      run: |
        $exe_path = "GameWikiAssistant_Portable_onedir\GameWikiAssistant\GameWikiAssistant.exe"
        if (Test-Path $exe_path) {
          Write-Host "✅ Build successful! Executable found at: $exe_path"
          $size = (Get-Item $exe_path).length / 1MB
          Write-Host "Executable size: $([math]::Round($size, 2)) MB"
          
          # Count total files
          $totalFiles = (Get-ChildItem -Path "GameWikiAssistant_Portable_onedir" -Recurse -File).Count
          Write-Host "Total files in package: $totalFiles"
        } else {
          Write-Host "❌ Build failed! Executable not found"
          exit 1
        }
      shell: pwsh
    
    - name: Create ZIP archive
      run: |
        Write-Host "Creating ZIP archive..."
        $source = "GameWikiAssistant_Portable_onedir\*"
        $destination = "GameWikiAssistant_Portable.zip"
        
        # Use Compress-Archive for better compatibility
        Compress-Archive -Path $source -DestinationPath $destination -CompressionLevel Optimal
        
        if (Test-Path $destination) {
          $size = (Get-Item $destination).length / 1MB
          Write-Host "✅ ZIP created successfully! Size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Host "❌ Failed to create ZIP"
          exit 1
        }
      shell: pwsh
    
    - name: Calculate SHA-256 checksum
      run: |
        Write-Host "Calculating SHA-256 checksum..."
        $hash = Get-FileHash "GameWikiAssistant_Portable.zip" -Algorithm SHA256
        $hashString = $hash.Hash
        
        # Save to file
        Set-Content -Path "GameWikiAssistant_Portable.zip.sha256" -Value "$hashString  GameWikiAssistant_Portable.zip"
        
        Write-Host "SHA-256: $hashString"
      shell: pwsh
    
    - name: Get version from tag
      id: get_version
      run: |
        $version = "${{ github.ref_name }}"
        if ($version -match '^v(.+)$') {
          $version = $matches[1]
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        Write-Host "Version: $version"
      shell: pwsh
    
    - name: Read CHANGELOG for release notes
      id: changelog
      run: |
        $changelog_file = "CHANGELOG.md"
        if (Test-Path $changelog_file) {
          # Try to extract the latest version's changes
          $content = Get-Content $changelog_file -Raw
          
          # Extract content between version headers (simple approach)
          if ($content -match '## \[?v?${{ steps.get_version.outputs.version }}\]?[^\n]*\n([\s\S]*?)(?=## \[?v?|\z)') {
            $notes = $matches[1].Trim()
          } else {
            # If specific version not found, use first section
            if ($content -match '## [^\n]+\n([\s\S]{0,2000})') {
              $notes = $matches[1].Trim()
            } else {
              $notes = "See CHANGELOG.md for details"
            }
          }
        } else {
          $notes = @"
        ## What's New
        - Automated build from GitHub Actions
        - OneDir package with all dependencies included
        - WebView2 Runtime installer included
        
        ## Installation
        1. Download and extract the ZIP file
        2. Run ``GameWikiAssistant.exe`` from the ``GameWikiAssistant`` folder
        3. If needed, install WebView2 Runtime from the ``runtime`` folder
        
        ## System Requirements
        - Windows 10/11 (64-bit)
        - Microsoft Edge WebView2 Runtime
        "@
        }
        
        # GitHub Actions requires special handling for multiline strings
        $notes = $notes -replace "`r`n", "`n"
        $notes = $notes -replace "`n", "%0A"
        echo "notes=$notes" >> $env:GITHUB_OUTPUT
      shell: pwsh
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: GameWikiAssistant ${{ steps.get_version.outputs.version }}
        body: |
          ## 🎮 GameWikiAssistant ${{ steps.get_version.outputs.version }}
          
          ${{ steps.changelog.outputs.notes }}
          
          ### 📦 Download
          - **[GameWikiAssistant_Portable.zip](${{ steps.upload-release-asset.outputs.browser_download_url }})** - Complete portable package
          
          ### 🔐 Verification
          SHA-256: See `GameWikiAssistant_Portable.zip.sha256` file
          
          ### 📋 Requirements
          - Windows 10/11 (64-bit)
          - Microsoft Edge WebView2 Runtime (installer included)
          
          ### 🚀 Quick Start
          1. Download and extract the ZIP
          2. Run `GameWikiAssistant\GameWikiAssistant.exe`
          3. Set your hotkey (default: Ctrl+Q)
          4. Start gaming with AI assistance!
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
    
    - name: Upload Release Asset - ZIP
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./GameWikiAssistant_Portable.zip
        asset_name: GameWikiAssistant_Portable.zip
        asset_content_type: application/zip
    
    - name: Upload Release Asset - SHA256
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./GameWikiAssistant_Portable.zip.sha256
        asset_name: GameWikiAssistant_Portable.zip.sha256
        asset_content_type: text/plain
    
    - name: Upload artifacts for debugging (optional)
      if: failure()  # Only upload if build fails
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          build/
          *.log
        retention-days: 7
    
    - name: Summary
      run: |
        Write-Host "=========================================="
        Write-Host "✅ Build and Release Complete!"
        Write-Host "=========================================="
        Write-Host "Version: ${{ steps.get_version.outputs.version }}"
        Write-Host "Release URL: ${{ steps.create_release.outputs.html_url }}"
        Write-Host "Download URL: ${{ steps.upload-release-asset.outputs.browser_download_url }}"
        Write-Host "=========================================="
      shell: pwsh